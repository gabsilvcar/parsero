# Isso é um comentário

# Se o nome é igual a definição
# então essa é uma palavra reservada
if:if
else:else
while:while
for:for
return:return
break:break
read:read
new:new
print:print
int:int
float:float
string:string
int_constant:int_constant
float_constant:float_constant
string_constant:string_constant
def:def

# Expressões auxiliares
# estas expressões fazem parte das
# definições regulares de outras expressões
# portanto não serão criados autômatos finitos
# para elas
digit: [0-9]
letter: [a-zA-Z]
symbols: (_| |!|\=|\&|@|#|$|%|\&|\||\+|-|\&|\*|/|\\|\"|\.|,| |
 | |
 |\{|\}|\<|\>|:|;|\?|\^|\Σ|\→)
sign: (\+|-)
decimal: (\.digit*)
scientific_notation: (e(\+|-)?digit+)

comparator: (==|!=|\<|\>|\<=|\>=)
operator: (\+|-|\*|/|\||\<\<|\>\>)
increment: (\+\+|\-\-)
atr: (=|\+=|\-=|\*=)
dot: \.
comma: ,
colon: :
semicolon: ;
backslash: \\
open_bracket:  closebracket:

open_square_bracket:  closesquarebracket:

open_curly_bracket: \{
close_curly_bracket: \}
open_bracket: \(
close_bracket: \)
open_square_bracket: \[
close_square_bracket: \]

equal: =


string_text: "inside_string*"
number: (sign?)(digit+)(decimal?)(scientific_notation?)
ident: letter(letter|digit|_)*